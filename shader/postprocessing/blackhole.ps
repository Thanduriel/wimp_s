#version 330

in vec4 gl_FragCoord;
in vec2 gs_texCoord;
in vec2 gs_center;

uniform sampler2D screenTex;

out vec4 fragColor;

#include "../globalubo.glsl"

// params
const float eventHorizon = 0.7f;
const float gradient = 0.f;
const float scale = 1.f / (1.f-eventHorizon);

const float quotient = (eventHorizon-1.0)*(eventHorizon-1.0);
const float a = (-gradient*eventHorizon + gradient - 1.0) /quotient;
const float b = (gradient*(eventHorizon*eventHorizon-1.0)+2.0) / quotient;
const float c = (eventHorizon*(-gradient*eventHorizon+gradient+eventHorizon-2.0))/quotient;

void main()
{
	float radius = sqrt(dot(gs_texCoord, gs_texCoord));
	if(radius >= 1.0) discard;
	
	if(radius < eventHorizon)
		fragColor.rgb = vec3(0,0,0);
	else
	{
		// window space -> uv
		vec2 coord = ((gl_FragCoord.xy) / vec2(c_fBBWidth, c_fBBHeight));
		vec2 dir = coord - gs_center;
		float len = length(dir);
		float ratio = len / radius;
		dir = dir / len;
		// linear
	//	fragColor.rgb = texture(screenTex, (gs_center - dir * ratio * (scale*radius - scale * eventHorizon)).xy).rgb;
		// quadratic
		coord = gs_center + ratio * dir * (a*radius*radius + b*radius + c);
		fragColor.rgb = texture(screenTex, coord).rgb ;
	/*				+ textureOffset(screenTex, coord, ivec2(0,2)).rgb
					+ textureOffset(screenTex, coord, ivec2(2,2)).rgb
					+ textureOffset(screenTex, coord, ivec2(2,0)).rgb
					+ textureOffset(screenTex, coord, ivec2(0,-2)).rgb
					+ textureOffset(screenTex, coord, ivec2(-2,-2)).rgb
					+ textureOffset(screenTex, coord, ivec2(-2,2)).rgb
					+ textureOffset(screenTex, coord, ivec2(-2,0)).rgb
					+ textureOffset(screenTex, coord, ivec2(2,-2)).rgb;*/
	//	fragColor.rgb *= 1.0 / 1.0;
	}
	fragColor.a = 1;
}
