#version 330

in vec2 gs_texCoord;
in vec4 gs_center;
in vec3 gs_eyeDirection;
in float gs_radius;

uniform sampler2D screenTex;
uniform sampler2D depthTex;

out vec4 fragColor;

#include "globalubo.glsl"
#include "cameraubo.glsl"

vec4 CalcEyeFromWindow(in float windowZ, in vec3 eyeDirection)
{
  float ndcZ =  (2.0 * windowZ - gl_DepthRange.near - gl_DepthRange.far) /
			(gl_DepthRange.far - gl_DepthRange.near);
  float eyeZ = c_vProjection.w / (ndcZ - c_vProjection.z);
  return vec4(eyeDirection * eyeZ, 1);
}

void main()
{	
	const float threshold = 0.1;
	float fallOff = threshold * gs_radius * gs_radius;
	vec4 eyePos = CalcEyeFromWindow(texture(depthTex, gs_texCoord).x, gs_eyeDirection);
	vec4 dif = eyePos - gs_center;
	
	float dSqr = dot(dif,dif);
	fragColor = vec4(1,1,1, clamp(0,1, fallOff / dSqr));
}
