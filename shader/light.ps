#version 330

in vec2 gs_texCoord;
in vec4 gs_center;
in vec3 gs_eyeDirection;
in vec3 gs_color;
in float gs_radius;
in float gs_fallOff;
in float gs_intensity;

uniform sampler2D screenTex;
uniform sampler2D depthTex;
uniform sampler2D normalTex;

out vec4 fragColor;

#include "globalubo.glsl"
#include "cameraubo.glsl"

vec4 CalcEyeFromWindow(in float windowZ, in vec3 eyeDirection)
{
  float ndcZ =  (2.0 * windowZ - gl_DepthRange.near - gl_DepthRange.far) /
			(gl_DepthRange.far - gl_DepthRange.near);
  float eyeZ = c_vProjection.w / (ndcZ - c_vProjection.z);
  return vec4(eyeDirection * eyeZ, 1);
}

const float threshold = 0.25; // same value as light.gs

void main()
{	
	vec4 eyePos = CalcEyeFromWindow(texture(depthTex, gs_texCoord).x, gs_eyeDirection);
	vec4 dif = gs_center - eyePos;
	dif.w = 0;
	
	float dSqr = dot(dif,dif);
	
	vec3 normal = texture(normalTex, gs_texCoord).xyz;
	float diffuse = max(0.0, dot(normal, dif.xyz / sqrt(dSqr)));
	float intensity = clamp((1/(gs_fallOff * dSqr) - threshold) * gs_intensity,0, 1);
//	float specular = pow(cosAngle, materialShininess);
	
	// intensity falls of ~ 1/r^2. To reach 0 at distance r the function is distorted and shifted
	fragColor = vec4(gs_color, intensity * diffuse);
//	fragColor += vec4(0.5,0.5,0.5,0.2);
}
